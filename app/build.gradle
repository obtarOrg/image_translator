apply plugin: 'com.android.application'

android {
    compileSdkVersion 31
    def gitUrl = getRepositoryURL()

    defaultConfig {
        applicationId "io.github.subhamtyagi.ocr"
        minSdkVersion 18
        targetSdkVersion 31
        versionCode 11
        versionName "3.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "github_url", gitUrl
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {

        release {
            resValue "string", "app_name", "OCR"
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {

            def workingBranch = getGitWorkingBranch()
            def normalizedWorkingBranch = workingBranch.replaceFirst("^[^A-Za-z]+", "").replaceAll("[^0-9A-Za-z]+", "")

            if (normalizedWorkingBranch.isEmpty() || workingBranch == "master" || workingBranch == "dev") {
                applicationIdSuffix ".dev"
                resValue "string", "app_name", "OCR Dev"
            } else {
                archivesBaseName = 'OCR_' + normalizedWorkingBranch
                applicationIdSuffix ".dev." + normalizedWorkingBranch
                resValue "string", "app_name", "OCR " + workingBranch
            }

            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation project(':cropper')

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

   // implementation 'cz.adaptech:tesseract4android:4.1.1'
    implementation 'cz.adaptech.tesseract4android:tesseract4android-openmp:4.3.0'
    implementation 'com.google.android.material:material:1.6.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation "com.airbnb.android:lottie:3.4.0"
    implementation 'com.karumi:dexter:6.2.1'
    implementation "org.androidannotations:rest-spring:4.3.0"
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.airbnb.android:lottie:3.4.0"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

}

static String getGitWorkingBranch() {
    try {
        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            // .git not present
            return ""
        }
    } catch (IOException ignored) {
        // git is not installed
        return ""
    }
}

static String getRepositoryURL(){
    try {
        def gitProcess = "git config --get remote.origin.url".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            return ""
        }
    } catch (IOException ignored) {
        return ""
    }
}

